<?xml version="1.0" encoding="UTF-8" ?>

<!--
  ~ La Trobe University - Distributed Deep Learning System
  ~ Copyright 2016 Matthias Langer (t3l@threelights.de)
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  ~
  -->

<configuration>
  <appender name="LTU_STDERR" class="ch.qos.logback.core.ConsoleAppender">
    <target>System.err</target>
    <encoder>
      <pattern>%date{HH:mm:ss} %level [%thread] %logger{1}: %msg%n</pattern>
    </encoder>
  </appender>

  <!-- M_LANGER: Configure ltu, blaze and inferno logging levels. -->
  <logger name="edu.latrobe"             level="INFO" />
  <logger name="org.apache.hadoop"       level="WARN" />
  <logger name="org.apache.http"         level="WARN" />
  <logger name="org.apache.http.wire"    level="ERROR" />
  <logger name="org.apache.spark"        level="WARN" />
  <logger name="org.eclipse.jetty"       level="WARN" />
  <logger name="org.spark-project.jetty" level="WARN" />
  <logger name="io.netty"                level="WARN" />

  <root level="ALL">
    <appender-ref ref="LTU_STDERR" />
  </root>

  <!--
    From: http://stackoverflow.com/questions/7839565/logging-levels-logback-rule-of-thumb-to-assign-log-levels

    error: the system is in distress, customers are probably being affected (or
           will soon be) and the fix probably requires human intervention. The
           "2AM rule" applies here- if you're on call, do you want to be woken
           up at 2AM if this condition happens? If yes, then log it as "error".

    warn:  an unexpected technical or business event happened, customers may be
           affected, but probably no immediate human intervention is required.
           On call people won't be called immediately, but support personnel
           will want to review these issues asap to understand what the impact
           is. Basically any issue that needs to be tracked but may not require
           immediate intervention.

    info:  things we want to see at high volume in case we need to forensically
           analyze an issue. System lifecycle events (system start, stop) go
           here. "Session" lifecycle events (login, logout, etc.) go here.
           Significant boundary events should be considered as well (e.g.
           database calls, remote API calls). Typical business exceptions can go
           here (e.g. login failed due to bad credentials). Any other event you
           think you'll need to see in production at high volume goes here.

    debug: just about everything that doesn't make the "info" cut... any message
           that is helpful in tracking the flow through the system and isolating
           issues, especially during the development and QA phases. We use
           "debug" level logs for entry/exit of most non-trivial methods and
           marking interesting events and decision points inside methods.

    trace: we don't use this often, but this would be for extremely detailed and
           potentially high volume logs that you don't typically want enabled
           even during normal development. Examples include dumping a full
           object hierarchy, logging some state during every iteration of a
           large loop, etc.
  -->
</configuration>
