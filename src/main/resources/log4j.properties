log4j.rootLogger=INFO, LTU_STDERR

log4j.appender.LTU_STDERR=org.apache.log4j.ConsoleAppender
log4j.appender.LTU_STDERR.target=System.err
log4j.appender.LTU_STDERR.layout=org.apache.log4j.PatternLayout
log4j.appender.LTU_STDERR.layout.ConversionPattern=%d{HH:mm:ss} %p [%t] %c{1}: %m%n


################################################################################
#   M_LANGER: Configure ltu, blaze and inferno logging levels.
################################################################################

log4j.logger.edu.latrobe=INFO

################################################################################
#   M_LANGER: Mute third party loggers to some extend.
################################################################################
log4j.logger.org.apache.hadoop=WARN
log4j.logger.org.apache.http=WARN
log4j.logger.org.apache.http.wire=ERROR
log4j.logger.org.apache.spark=WARN
log4j.logger.org.eclipse.jetty=WARN
log4j.logger.org.spark-project.jetty=WARN
log4j.logger.io.netty=WARN


################################################################################
#
# From: http://stackoverflow.com/questions/7839565/logging-levels-logback-rule-of-thumb-to-assign-log-levels
#
# error: the system is in distress, customers are probably being affected (or
#        will soon be) and the fix probably requires human intervention. The
#        "2AM rule" applies here- if you're on call, do you want to be woken
#        up at 2AM if this condition happens? If yes, then log it as "error".
#
# warn:  an unexpected technical or business event happened, customers may be
#        affected, but probably no immediate human intervention is required.
#        On call people won't be called immediately, but support personnel
#        will want to review these issues asap to understand what the impact
#        is. Basically any issue that needs to be tracked but may not require
#        immediate intervention.
#
# info:  things we want to see at high volume in case we need to forensically
#        analyze an issue. System lifecycle events (system start, stop) go
#        here. "Session" lifecycle events (login, logout, etc.) go here.
#        Significant boundary events should be considered as well (e.g.
#        database calls, remote API calls). Typical business exceptions can go
#        here (e.g. login failed due to bad credentials). Any other event you
#        think you'll need to see in production at high volume goes here.
#
# debug: just about everything that doesn't make the "info" cut... any message
#        that is helpful in tracking the flow through the system and isolating
#        issues, especially during the development and QA phases. We use
#        "debug" level logs for entry/exit of most non-trivial methods and
#        marking interesting events and decision points inside methods.
#
# trace: we don't use this often, but this would be for extremely detailed and
#        potentially high volume logs that you don't typically want enabled
#        even during normal development. Examples include dumping a full
#        object hierarchy, logging some state during every iteration of a
#        large loop, etc.
#
################################################################################
